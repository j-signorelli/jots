// Define variables needed in test code
#define SOURCE_DIR "@PROJECT_SOURCE_DIR@"

#include <cmath>

#include "jots_driver.hpp"


using namespace mfem;
using namespace std;

const int N_REINERT = 100; // Inclusive end of summation over terms of analytical solution infinite series to include
    
int Reinert_Test(int test_case_num, std::function<double(const Vector &, double)> Reinert_Analytical)
{
    const int SIM_TIME = 2.0;
    const double EPSILON = 1e-5;
    const double DT = 1e-4;

    // Initialize MPI and HYPRE.
    Mpi::Init();
    int num_procs = Mpi::WorldSize();
    int myid = Mpi::WorldRank();
    Hypre::Init();

    // Get input file for Reinert_B#
    stringstream input_file;
    input_file << SOURCE_DIR << "/examples/Reinert_B" << test_case_num << "/Reinert_B" << test_case_num << ".ini";

    // Parse the config file
    Config input(input_file.str().c_str());

    // Update the mesh file location (may not be relative to that local directory)
    stringstream mesh_file;
    mesh_file << SOURCE_DIR << "/examples/meshes/Reinert_1D_block.mesh";
    input.SetMeshFile(mesh_file.str().c_str());

    // Suppress any output
    input.SetRestartFreq(INT_MAX);
    input.SetVisFreq(INT_MAX);

    // Only run for SIM_TIME
    input.SetFinalTime(SIM_TIME);

    // Used reduced dt for test
    input.Setdt(DT);

    // Create new JOTSDriver
    JOTSDriver* driver = new JOTSDriver(input, myid, num_procs);

    // Run driver
    driver->Run();

    // Define exact solution coefficient
    FunctionCoefficient u_exact(Reinert_Analytical);
    u_exact.SetTime(SIM_TIME);

    // Get the finite-element approximation solution
    double error = driver->GetOutputManager()->GetT_gf()->ComputeL2Error(u_exact);

    if (myid == 0)
        cout << "Error: " << error;

    if (isnan(error))
    {
        cout << "Failed!" << endl;
        return 1;
    }

    if (error > EPSILON)
    {
        if (myid == 0)
            cout << " > " << EPSILON << endl << "Failed!" << endl;
        return 1;
    }
    else
        if (myid == 0)
            cout << " <= " << EPSILON << endl << "Success!" << endl;

    // Delete driver
    delete driver;

    return 0;
}